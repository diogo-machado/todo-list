{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","action","className","value","onChange","e","target","type","onClick","preventDefault","text","completed","id","Math","random","name","defaultProps","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","filterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b572fc2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({\n  inputText, setInputText, todos, setTodos, setStatus,\n}) => {\n  const inputTextHandler = (e) => {\n    setInputText(e.target.value);\n  };\n  const submitTodoHandler = (e) => {\n    e.preventDefault();\n    if (!inputText) {\n      return 'empty';\n    }\n    setTodos([...todos, { text: inputText, completed: false, id: Math.random() * 1000 }]);\n    setInputText('');\n  };\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n  return (\n    <form action=\"\">\n      <div className=\"control\">\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n          <i className=\"fas fa-plus-square\" />\n        </button>\n      </div>\n\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"\" id=\"\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nForm.defaultProps = {\n  inputText: '',\n  todos: [],\n  setTodos: () => {},\n  setStatus: () => {},\n};\n\nForm.propTypes = {\n  inputText: PropTypes.string,\n  setInputText: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number.isRequired,\n  })),\n  setTodos: PropTypes.func,\n  setStatus: PropTypes.func,\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({\n  text, todos, setTodos, todo,\n}) => {\n  const deleteHandler = () => {\n    setTodos(todos.filter((el) => el.id !== todo.id));\n  };\n\n  const completeHandler = () => {\n    setTodos(todos.map((item) => {\n      if (item.id === todo.id) {\n        return {\n          ...item, completed: !item.completed,\n        };\n      }\n      return item;\n    }));\n  };\n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>{text}</li>\n      <button type=\"button\" onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\" /></button>\n      <button type=\"button\" onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\" /></button>\n    </div>\n  );\n};\n\nTodo.defaultProps = {\n  text: '',\n  todos: [],\n  setTodos: () => {},\n  todo: { text: '', completed: false, id: 1 },\n};\n\nTodo.propTypes = {\n  text: PropTypes.string,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number,\n  })),\n  setTodos: PropTypes.func,\n  todo: PropTypes.shape({\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number.isRequired,\n  }),\n\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => (\n  <div className=\"todo-container\">\n    <ul className=\"todo-list\">\n      {filteredTodos.map((todo) => (\n        <Todo\n          setTodos={setTodos}\n          todos={todos}\n          key={todo.id}\n          text={todo.text}\n          todo={todo}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nTodoList.defaultProps = {\n  todos: [],\n  setTodos: () => {},\n  filteredTodos: [],\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number.isRequired,\n  })),\n  setTodos: PropTypes.func,\n  filteredTodos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number.isRequired,\n  })),\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      const todoLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todoLocal);\n    }\n  };\n\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    const filterHandler = () => {\n      switch (status) {\n        case 'completed':\n          setFilteredTodos(todos.filter((todo) => todo.completed === true));\n          break;\n        case 'uncompleted':\n          setFilteredTodos(todos.filter((todo) => todo.completed === false));\n          break;\n        default:\n          setFilteredTodos(todos);\n      }\n    };\n\n    const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos));\n    };\n\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Diogo Todo List</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        setInputText={setInputText}\n        todos={todos}\n        setTodos={setTodos}\n        setStatus={setStatus}\n      />\n      <TodoList\n        setTodos={setTodos}\n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}